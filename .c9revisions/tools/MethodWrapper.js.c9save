{"ts":1368205096182,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// reference the http module so we can create a webserver\nvar http = require(\"http\");\n\n// create a server\nhttp.createServer(function(req, res) {\n    // on every request, we'll output 'Hello world'\n    res.end(\"Hello world from Cloud9!\");\n}).listen(process.env.PORT, process.env.IP);\n\n// Note: when spawning a server on Cloud9 IDE, \n// listen on the process.env.PORT and process.env.IP environment variables\n\n// Click the 'Run' button at the top to start your server,\n// then click the URL that is emitted to the Output tab of the console"]],"start1":0,"start2":0,"length1":0,"length2":537}]],"length":537}
{"contributors":[],"silentsave":false,"ts":1368205101154,"patch":[[{"diffs":[[-1,"// reference the http module so we can create a webserver\nvar http = require(\"http\");\n\n// create a server\nhttp.createServer(function(req, res"],[1,"var IgnoredFunctions = [\"toString\", \"offsetState\", \"onAfterSetStencil\"];\r\nvar MethodCache = {};\r\nvar old_log = console.log;\r\nvar log_key = false;\r\nvar log_url = \"http://ngateway.fusspawn.c9.io/log\";\r\nvar should_web_log = false;\r\n\r\nfunction __log(message"],[0,") {"],[1,"\r"],[0,"\n    "],[-1,"// on every request, we'll output 'Hello world'\n    res.end(\"Hello world from Cloud9!\""],[1,"if(log_key == false)\r\n        log_key = new Date().toString();\r\n    if(should_web_log)   \r\n        $.post(log_url, {sessionKey: log_key, message: message});\r\n    \r\n    console.log(message"],[0,");"],[1,"\r"],[0,"\n}"],[-1,").listen(process.env.PORT, process.env.IP);\n\n// Note: when spawning a server on Cloud9 IDE, \n// listen on the process.env.PORT and process.env.IP environment variables\n\n// Click the 'Run' button at the top to start your server,\n// then click the URL that is emitted to the Output tab of the console"],[1,"\r\n\r\n\r\n\r\n\r\nfunction is_a_function(possible_func) {\r\n    return (client[possible_func] \r\n        && {}.toString.call(client[possible_func]) === '[object Function]');\r\n}\r\n\r\nfunction is_ignored(possible_func) {\r\n    for(var i in IgnoredFunctions)\r\n        if(possible_func == IgnoredFunctions[i])\r\n            return true;\r\n            \r\n    return false;\r\n}\r\n\r\nfunction wrap_if_function(possible_func) {\r\n    if(is_a_function(possible_func) && !is_ignored(possible_func)) {\r\n        MethodCache[possible_func] = client[possible_func];\r\n        client[possible_func] = function() {\r\n            __log(\"wrapped_call: \" + possible_func + \" with args: \");\r\n            \r\n            \r\n            for(var i in arguments)\r\n                __log(\"arg: \" + i  + \" is \" +  arguments[i]);\r\n                \r\n            var retval =  MethodCache[possible_func].apply(client, arguments);\r\n            if(retval)\r\n                __log(\"it returned: \" + retval)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction __Detour(obj, remote_log) {\r\n    should_web_log = remote_log;\r\n    \r\n    for(var i in obj) \r\n        wrap_if_function(i);\r\n    \r\n    console.log(\"wrapped\");\r\n}\r\n\r\nfunction __Restore(obj) {\r\n    for(var i in MethodCache) {\r\n        client[i] = MethodCache[i];\r\n    }\r\n    console.log(\"restored\");\r\n}\r\n\r\n__Detour(client, false);"]],"start1":0,"start2":0,"length1":537,"length2":1763}]],"length":1763,"saved":false}
